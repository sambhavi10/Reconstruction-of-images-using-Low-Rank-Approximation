# -*- coding: utf-8 -*-
"""SVD_2_Image.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10uW_MYjSpIxqEsWx4BRPW_wOmM-a0YJ_

## We will perform SVD of an image and we will check different low rank approximation of that image
"""

import numpy as np
import pandas as pd
import cv2 as cv
from google.colab.patches import cv2_imshow
from skimage import io
from PIL import Image
import matplotlib.pylab as plt

##TODO : LOAD IMAGE
from google.colab import files
from IPython.display import Image

#uploaded = files.upload()

#m = Image('girl.jpg',width = 500)

url = 'https://www.wallpapertip.com/wmimgs/145-1455415_taylor-swift-iphone-wallpapers-top-free-taylor-swift.jpg'
myImg = io.imread(url) # myImg is a color image, 3 bands: RGB, 3D array 
gray_image = cv.cvtColor(myImg, cv.COLOR_BGR2GRAY) #gray image - converting 3D to 2D array
img_mat = np.array(list(gray_image),float) 
print(img_mat) #printing the matrix
print(img_mat.shape)
plt.imshow(img_mat)
img_mat.shape 


#these are pixel values of a grayscale image(values - 0 to 255)

#before applying SVD, scaling the entries of this 2D matrix which represents the above image
#scale them such that mean=0, standard deviation = 1
img_mat_scaled = (img_mat - img_mat.mean())/img_mat.std() #(x-U)/s.d

#performing SVD
U, s, V = np.linalg.svd(img_mat_scaled)

#compute variance explained by each singular vector
var_explained = np.round(s**2/np.sum(s**2),decimals = 3)

#plotting 1st 10 singular vectors
#as we increase the no. of singular vectors, the variance reduces
import seaborn as sns
sns.barplot(x = list(range(1,11)),y = var_explained[0:10], color = "blue")
plt.xlabel('Singular Vector')
plt.ylabel('Variance Explained')
#plt.tight_layout()
plt.savefig('svd_scree_plot.jpg',dpi = 150, figsize = (10,10)) #saving the figure

#when you cut down number of singular vector, you can save memory

"""### Reconstruction"""

#slicing the matrix, to get a matrices of lower dimension
num_components = 2
reconst_img_1 = np.array(U[:,: num_components]) .dot(np.diag(s[:num_components]).dot(np.array(V[:num_components,:])))
plt.imshow(reconst_img_1)

#using top 5 singular values
num_components = 5
reconst_img_5 = np.array(U[:,: num_components]) .dot(np.diag(s[:num_components]).dot(np.array(V[:num_components,:])))
plt.imshow(reconst_img_5)

num_components = 10
reconst_img_10 = np.array(U[:,: num_components]) .dot(np.diag(s[:num_components]).dot(np.array(V[:num_components,:])))
plt.imshow(reconst_img_10)

num_components = 25
reconst_img_25 = np.array(U[:,: num_components]) .dot(np.diag(s[:num_components]).dot(np.array(V[:num_components,:])))
plt.imshow(reconst_img_25
           )

num_components = 50
reconst_img_50 = np.array(U[:,: num_components]) .dot(np.diag(s[:num_components]).dot(np.array(V[:num_components,:])))
plt.imshow(reconst_img_50
           )

num_components = 500
reconst_img_500 = np.array(U[:,: num_components]) .dot(np.diag(s[:num_components]).dot(np.array(V[:num_components,:])))
plt.imshow(reconst_img_500
           )

fig, axis = plt.subplots(2,2,figsize = (10,10))
axis[0,0].imshow(reconst_img_5)
axis[0,0].set_title('Reconstructed Image: 5 SVs', size = 16)
axis[0,1].imshow(reconst_img_10)
axis[0,1].set_title('Reconstructed Image: 10 SVs', size = 16)
axis[1,0].imshow(reconst_img_25)
axis[1,0].set_title('Reconstructed Image: 25 SVs', size = 16)
axis[1,1].imshow(reconst_img_500)
axis[1,1].set_title('Reconstructed Image: 500 SVs', size = 16)
plt.tight_layout()

